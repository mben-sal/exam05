Առաջադրանքի անունը՝ cpp_module_01
Ակնկալվող ֆայլեր՝ Warlock.cpp Warlock.hpp
                   ASpell.hpp ASpell.cpp
				   ATarget.hpp ATarget.cpp
				   Fwoosh.hpp Fwoosh.cpp
				   Dummy.hpp Dummy.cpp
--------------------------------------------------------------------------------

Warlock դասում switch-ը ՉԻ ԹՈՒՅԼԱՏՐՎՈՒՄ և դրա գործածումը կհանգեցնի -42-ի։

Ստեղծել ASpell անունով աբստրակտ դաս` Քոփլիեն ձևաչափով, որն ունի հետևյալ
պաշտպանված հատկանիշները։

* name (string)
* effects (string)

Երկուսն էլ getter-ներ կունենան (getName և getEffects), որ տողեր է վերադարձնում։

Նաև ավելացրեք կլոնավորելու ճիշտ տարբերակ, որը ASpell-ին վերադարձնում է ցուցիչ։

Այս բոլոր ֆունկցիաները կարող են կանչվել հաստատուն օբյեկտների վրա։

ASpell-ը ունի կոնստրուկտոր, որը ստանում է իր անունն ու էֆֆեկտները՝ տրված հերթականությամբ։

Հիմա կստեղծեք ATarget աբստրակտ դաս՝ Քոփլիեն ձևաչափով։ Այն կունենա տող(string) տեսակի հատկանիշ,
և դրան համապատասխան getter, getType, որը հաստատուն տողին վերադարձնում է
հղում։

Ինչպես ASpell-ի դեպքում, դրան պետք է ավելացնել clone() մեթոդը։

Այս բոլոր ֆունկցիաները կարող են կանչվել հաստատուն օբյեկտի վրա։

Այն ունի կոնստրուկտոր, որը ստանում է իր տեսակը։

Հիմա ձեր ATarget-ին ավելացրեք getHitBySpell ֆունկցիա, որը ստանում է հաստատուն 
ASpell-ի հղում։

Այն կարտածի՝

<TYPE> has been <EFFECTS>!

<TYPE>-ը ATarget-ի տեսակն է, իսկ <EFFECTS>-ը՝ ASpell-ի getEffects ֆունկցիայի
վերադարձրածը։

Վերջապես ձեր ASpell դասին ավելացրե՛ք launch ֆունկցիա, որը ստանում է հաստատուն 
ATarget-ի հղում։

Այս մեկը ուղղակի կկանչի փոխանցված օբյեկտի getHitBySpell-ը՝ ներկայիս օրինակը 
որպես պարամետս փոխանցելով։


Երբ այս ամենը արված է, ձեր ASpell դասը իրականացրե՛ք Fwoosh։ Դրա լռելյայն
կոնստրուկտորը անունը կդնի «Fwoosh» իսկ էֆեկտները՝ «fwooshed»։ Իհարկե, պետք է իրականացնել
clone() մեթոդը։ Fwoosh-ի դեպքում այն կվերադարձնի մի նոր Fwoosh օբյեկտի ցուցիչ։


Նույն կերպ ստեղծե՛ք Dummy անունով որոշակի ATarget, որի տեսակը 
 «Target Practice Dummy» է։ Պետք է նաև իրականացնել դրա clone() մեթոդը։

Warlock-ին ավելացրեք հետևյալ անդամ ֆունկցիաները՝

* learnSpell, ASpell-ին փոխանցում է ցուցիչ, որը Warlock-ին կախարդական խոսք է սովորեցնում
* forgetSpell, կախարդանքի խոսքին համապատասխան տող է վերցնում և Warlock-ին ստիպում է մոռանալ
  այն։ Եթե հայտնի կախարդական խոսք չէ, ոչիչ չի անում։
* launchSpell, վերցնում է մի տող (կախարդանքի անուն) և ATarget-ի հղում, որը ընտրված 
թիրախի վրա կազմարկում է կախարդանքի խոսքը։ Եթե հայտնի կախարդական խոսք չէ, ոչիչ չի անում։


Ձեզ պետք կգա մի նոր հատկանիշ ձեր Warlock-ի իմացած կախարդանքի խոսքերը պահելու համար։
Մի քանի տեսակներ են համապատասխանում պահանջվածին, լավագույնը ընտրելը ձեզնից է կախված։

Ստորև մի հավանական փորձնական main է և դրա սպասված ելքը։

int main()
{
  Warlock richard("Richard", "the Titled");

  Dummy bob;
  Fwoosh* fwoosh = new Fwoosh();

  richard.learnSpell(fwoosh);

  richard.introduce();
  richard.launchSpell("Fwoosh", bob);

  richard.forgetSpell("Fwoosh");
  richard.launchSpell("Fwoosh", bob);
}

~$ ./a.out | cat -e
Richard: This looks like another boring day.$
Richard: I am Richard, the Titled!$
Target Practice Dummy has been fwooshed!$
Richard: My job here is done!$
